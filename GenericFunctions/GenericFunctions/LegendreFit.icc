// -*- C++ -*-
// $Id: 
#include <sstream>
#include <cmath>
#include <gsl/gsl_sf_legendre.h>
#include <complex>
namespace Genfun {

FUNCTION_OBJECT_IMP(LegendreFit)

inline
LegendreFit::LegendreFit(unsigned int N):
   N(N)
{
  for (unsigned int i=0;i<N;i++) {
    std::ostringstream stream;
    stream << "Fraction " << i;
    fraction.push_back(new Parameter(stream.str(), 0.5, 0.0, 1.0));
  }
  for (unsigned int i=0;i<N;i++) {
    std::ostringstream stream;
    stream << "Phase " << i;
    phase.push_back(new Parameter(stream.str(), M_PI, 0.0, 2.0*M_PI));
  }
}

inline
LegendreFit::~LegendreFit() {
  for (unsigned int i=0;i<N;i++) {
    delete fraction[i];
    delete phase[i];
  }
}

inline
LegendreFit::LegendreFit(const LegendreFit & right):
  N(right.N)
{
  for (int i=0;i<N;i++) {
    fraction.push_back(new Parameter(*right.fraction[i]));
    phase.push_back(new Parameter(*right.phase[i]));
  }
}

inline
double LegendreFit::operator() (double x) const {

    double Pk[N+1];
    gsl_sf_legendre_Pl_array(N, x, Pk);
    unsigned int n=N;
    std::complex<double> P=0.0;
    std::complex<double> I(0,1.0);
    double f=1.0;
    while (1) {
      if (n==0) {
	double fn=1.0;
	double Pn=sqrt((2*n+1.0))*Pk[n];
       
	P+=(sqrt(f*fn)*Pn);
	break;
      }
      else {
	double fn=getFraction(n-1)->getValue();
	double px=getPhase(n-1)->getValue();
	double Pn=sqrt((2*n+1.0))*Pk[n];
	P+=exp(I*px)*sqrt(f*fn)*Pn;
	f*=(1-fn);
	n--;
      }
    }
    return std::norm(P);
}
inline 
unsigned int LegendreFit::order() const{
  return N;
} 
inline
Parameter *LegendreFit::getFraction(unsigned int i) {
  return fraction[i];
}
inline 
const Parameter *LegendreFit::getFraction(unsigned int i) const{
  return fraction[i];
}
inline
Parameter *LegendreFit::getPhase(unsigned int i) {
  return phase[i];
}
inline 
const Parameter *LegendreFit::getPhase(unsigned int i) const{
  return phase[i];
}


} // end namespace Genfun 
