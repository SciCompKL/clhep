#include "CLHEPTypes.hpp"
// -*- C++ -*-
// $Id: LorentzVector.icc,v 1.3 2010/06/16 17:15:57 garren Exp $
// ---------------------------------------------------------------------------
//
// This file is a part of the CLHEP - a Class Library for High Energy Physics.
// 
// This is the definitions of the inline member functions of the
// HepLorentzVector class.
//

#include "CLHEP/Vector/ZMxpv.h"

#include <cmath>

namespace CLHEP {

inline CLHEPdouble HepLorentzVector::x() const { return pp.x(); }
inline CLHEPdouble HepLorentzVector::y() const { return pp.y(); }
inline CLHEPdouble HepLorentzVector::z() const { return pp.z(); }
inline CLHEPdouble HepLorentzVector::t() const { return ee; }

inline HepLorentzVector::
HepLorentzVector(CLHEPdouble x1, CLHEPdouble y1, CLHEPdouble z1, CLHEPdouble t1)
  : pp(x1, y1, z1), ee(t1) {}

inline HepLorentzVector:: HepLorentzVector(CLHEPdouble x1, CLHEPdouble y1, CLHEPdouble z1)
  : pp(x1, y1, z1), ee(0) {}

inline HepLorentzVector:: HepLorentzVector(CLHEPdouble t1)
  : pp(0, 0, 0), ee(t1) {}

inline HepLorentzVector:: HepLorentzVector()
  : pp(0, 0, 0), ee(0) {}

inline HepLorentzVector::HepLorentzVector(const Hep3Vector & p, CLHEPdouble e1)
  : pp(p), ee(e1) {}

inline HepLorentzVector::HepLorentzVector(CLHEPdouble e1, const Hep3Vector & p)
  : pp(p), ee(e1) {}

inline HepLorentzVector::HepLorentzVector(const HepLorentzVector & p)
  : pp(p.x(), p.y(), p.z()), ee(p.t()) {}

inline HepLorentzVector::~HepLorentzVector() {}

inline HepLorentzVector::operator const Hep3Vector & () const {return pp;}
inline HepLorentzVector::operator Hep3Vector & () { return pp; }

inline void HepLorentzVector::setX(CLHEPdouble a) { pp.setX(a); } 
inline void HepLorentzVector::setY(CLHEPdouble a) { pp.setY(a); }
inline void HepLorentzVector::setZ(CLHEPdouble a) { pp.setZ(a); }
inline void HepLorentzVector::setT(CLHEPdouble a) { ee = a;}

inline CLHEPdouble HepLorentzVector::px() const { return pp.x(); }
inline CLHEPdouble HepLorentzVector::py() const { return pp.y(); }
inline CLHEPdouble HepLorentzVector::pz() const { return pp.z(); }
inline CLHEPdouble HepLorentzVector::e()  const { return ee; }

inline void HepLorentzVector::setPx(CLHEPdouble a) { pp.setX(a); } 
inline void HepLorentzVector::setPy(CLHEPdouble a) { pp.setY(a); }
inline void HepLorentzVector::setPz(CLHEPdouble a) { pp.setZ(a); }
inline void HepLorentzVector::setE(CLHEPdouble a)  { ee = a;}

inline Hep3Vector HepLorentzVector::vect() const { return pp; } 
inline void HepLorentzVector::setVect(const Hep3Vector &p) { pp = p; } 

inline CLHEPdouble HepLorentzVector::theta() const { return pp.theta(); }
inline CLHEPdouble HepLorentzVector::cosTheta() const { return pp.cosTheta(); }
inline CLHEPdouble HepLorentzVector::phi() const { return pp.phi(); }
inline CLHEPdouble HepLorentzVector::rho() const { return pp.mag(); }

inline void HepLorentzVector::setTheta(CLHEPdouble a) { pp.setTheta(a); }
inline void HepLorentzVector::setPhi(CLHEPdouble a) { pp.setPhi(a); }
inline void HepLorentzVector::setRho(CLHEPdouble a) { pp.setMag(a); }

CLHEPdouble & HepLorentzVector::operator [] (int i)       { return (*this)(i); }
CLHEPdouble   HepLorentzVector::operator [] (int i) const { return (*this)(i); }

inline HepLorentzVector &
HepLorentzVector::operator = (const HepLorentzVector & q) {
  pp = q.vect();
  ee = q.t();
  return *this;
}

inline HepLorentzVector
HepLorentzVector::operator + (const HepLorentzVector & q) const {
  return HepLorentzVector(x()+q.x(), y()+q.y(), z()+q.z(), t()+q.t());
}

inline HepLorentzVector &
HepLorentzVector::operator += (const HepLorentzVector & q) {
  pp += q.vect();
  ee += q.t();
  return *this;
}

inline HepLorentzVector
HepLorentzVector::operator - (const HepLorentzVector & q) const {
  return HepLorentzVector(x()-q.x(), y()-q.y(), z()-q.z(), t()-q.t());
}

inline HepLorentzVector &
HepLorentzVector::operator -= (const HepLorentzVector & q) {
  pp -= q.vect();
  ee -= q.t();
  return *this;
}

inline HepLorentzVector HepLorentzVector::operator - () const {
  return HepLorentzVector(-x(), -y(), -z(), -t());
}

inline HepLorentzVector& HepLorentzVector::operator *= (CLHEPdouble a) {
  pp *= a;
  ee *= a;
  return *this;
}

inline bool
HepLorentzVector::operator == (const HepLorentzVector & q) const {
  return (vect()==q.vect() && t()==q.t());
}

inline bool
HepLorentzVector::operator != (const HepLorentzVector & q) const {
  return (vect()!=q.vect() || t()!=q.t());
}

inline CLHEPdouble HepLorentzVector::perp2() const   { return pp.perp2(); }
inline CLHEPdouble HepLorentzVector::perp()  const   { return pp.perp(); }
inline void HepLorentzVector::setPerp(CLHEPdouble a) { pp.setPerp(a); }

inline CLHEPdouble HepLorentzVector::perp2(const Hep3Vector &v1) const {
  return pp.perp2(v1);
}

inline CLHEPdouble HepLorentzVector::perp(const Hep3Vector &v1) const {
  return pp.perp(v1);
}

inline CLHEPdouble HepLorentzVector::angle(const Hep3Vector &v1) const {
  return pp.angle(v1);
}

inline CLHEPdouble HepLorentzVector::mag2() const {
  return metric*(t()*t() - pp.mag2());
}

inline CLHEPdouble HepLorentzVector::mag() const {
  CLHEPdouble mmm = m2();
  return mmm < 0.0 ? -std::sqrt(-mmm) : std::sqrt(mmm);
}

inline CLHEPdouble HepLorentzVector::m2() const { 
  return t()*t() - pp.mag2();
}

inline CLHEPdouble HepLorentzVector::m() const { return mag(); }

inline CLHEPdouble HepLorentzVector::mt2() const {
  return e()*e() - pz()*pz();
}

inline CLHEPdouble HepLorentzVector::mt() const {
  CLHEPdouble mmm = mt2();
  return mmm < 0.0 ? -std::sqrt(-mmm) : std::sqrt(mmm);
}

inline CLHEPdouble HepLorentzVector::et2() const {
  CLHEPdouble pt2 = pp.perp2();
  return pt2 == 0 ? 0 : e()*e() * pt2/(pt2+z()*z());
}

inline CLHEPdouble HepLorentzVector::et() const {
  CLHEPdouble etet = et2();
  return e() < 0.0 ? -std::sqrt(etet) : std::sqrt(etet);
}

inline CLHEPdouble HepLorentzVector::et2(const Hep3Vector & v1) const {
  CLHEPdouble pt2 = pp.perp2(v1);
  CLHEPdouble pv = pp.dot(v1.unit());
  return pt2 == 0 ? 0 : e()*e() * pt2/(pt2+pv*pv);
}

inline CLHEPdouble HepLorentzVector::et(const Hep3Vector & v1) const {
  CLHEPdouble etet = et2(v1);
  return e() < 0.0 ? -std::sqrt(etet) : std::sqrt(etet);
}

inline void 
HepLorentzVector::setVectMag(const Hep3Vector & spatial, CLHEPdouble magnitude) {
  setVect(spatial);
  setT(std::sqrt(magnitude * magnitude + spatial * spatial));
}

inline void 
HepLorentzVector::setVectM(const Hep3Vector & spatial, CLHEPdouble mass) {
  setVectMag(spatial, mass);
}

inline CLHEPdouble HepLorentzVector::dot(const HepLorentzVector & q) const {
  return metric*(t()*q.t() - z()*q.z() - y()*q.y() - x()*q.x());
}

inline CLHEPdouble
HepLorentzVector::operator * (const HepLorentzVector & q) const {
  return dot(q);
}

inline CLHEPdouble HepLorentzVector::plus() const {
  return t() + z();
}

inline CLHEPdouble HepLorentzVector::minus() const {
  return t() - z();
}

inline HepLorentzVector & HepLorentzVector::boost(const Hep3Vector & b) {
  return boost(b.x(), b.y(), b.z());
}

inline CLHEPdouble HepLorentzVector::pseudoRapidity() const {
  return pp.pseudoRapidity();
}

inline CLHEPdouble HepLorentzVector::eta() const {
  return pp.pseudoRapidity();
}

inline CLHEPdouble HepLorentzVector::eta( const Hep3Vector & ref ) const {
  return pp.eta( ref );
}

inline HepLorentzVector &
HepLorentzVector::operator *= (const HepRotation & m1) {
  pp.transform(m1);
  return *this;
}

inline HepLorentzVector &
HepLorentzVector::transform(const HepRotation & m1) {
  pp.transform(m1);
  return *this;
}

inline HepLorentzVector operator * (const HepLorentzVector & p, CLHEPdouble a) {
  return HepLorentzVector(a*p.x(), a*p.y(), a*p.z(), a*p.t());
}

inline HepLorentzVector operator * (CLHEPdouble a, const HepLorentzVector & p) {
  return HepLorentzVector(a*p.x(), a*p.y(), a*p.z(), a*p.t());
}

// The following were added when ZOOM PhysicsVectors was merged in:

inline HepLorentzVector::HepLorentzVector( 
	CLHEPdouble x1, CLHEPdouble y1, CLHEPdouble z1, Tcomponent t1 ) :
	pp(x1, y1, z1), ee(t1) {}

inline void HepLorentzVector::set(
	CLHEPdouble x1, CLHEPdouble y1, CLHEPdouble z1, Tcomponent t1 ) {
  pp.set(x1,y1,z1);
  ee = t1;
}

inline void HepLorentzVector::set(
        CLHEPdouble x1, CLHEPdouble y1, CLHEPdouble z1, CLHEPdouble t1 ) {
  set (x1,y1,z1,Tcomponent(t1));
}

inline HepLorentzVector::HepLorentzVector( 
	Tcomponent t1, CLHEPdouble x1, CLHEPdouble y1, CLHEPdouble z1 ) :
        pp(x1, y1, z1), ee(t1) {}   

inline void HepLorentzVector::set(
	Tcomponent t1, CLHEPdouble x1, CLHEPdouble y1, CLHEPdouble z1 ) {
  pp.set(x1,y1,z1);
  ee = t1;
}

inline void HepLorentzVector::set( Tcomponent t1 ) {
  pp.set(0, 0, 0);
  ee = t1;
}

inline void HepLorentzVector::set( CLHEPdouble t1 ) {
  pp.set(0, 0, 0);
  ee = t1;
}

inline HepLorentzVector::HepLorentzVector( Tcomponent t1 ) : 
	pp(0, 0, 0), ee(t1) {}

inline void HepLorentzVector::set( const Hep3Vector & v1 ) {
  pp = v1;
  ee = 0;
}

inline HepLorentzVector::HepLorentzVector( const Hep3Vector & v1 ) : 
	pp(v1), ee(0) {}

inline void HepLorentzVector::setV(const Hep3Vector & v1) {
  pp = v1;
}

inline HepLorentzVector & HepLorentzVector::operator=(const Hep3Vector & v1) {
  pp = v1;
  ee = 0;
  return *this;
}

inline CLHEPdouble HepLorentzVector::getX() const { return pp.x(); }
inline CLHEPdouble HepLorentzVector::getY() const { return pp.y(); }
inline CLHEPdouble HepLorentzVector::getZ() const { return pp.z(); }
inline CLHEPdouble HepLorentzVector::getT() const { return ee; }

inline Hep3Vector HepLorentzVector::getV() const { return pp; } 
inline Hep3Vector HepLorentzVector::v() const { return pp; } 

inline void HepLorentzVector::set(CLHEPdouble t1, const Hep3Vector & v1) {
  pp = v1;
  ee = t1;
}

inline void HepLorentzVector::set(const Hep3Vector & v1, CLHEPdouble t1) {
  pp = v1;
  ee = t1;
}

inline void HepLorentzVector::setV( CLHEPdouble x1,
             CLHEPdouble y1,
             CLHEPdouble z1 ) { pp.set(x1, y1, z1); }

inline void HepLorentzVector::setRThetaPhi 
		( CLHEPdouble r, CLHEPdouble ttheta, CLHEPdouble phi1 ) 
                         { pp.setRThetaPhi( r, ttheta, phi1 ); }

inline void HepLorentzVector::setREtaPhi 
		( CLHEPdouble r, CLHEPdouble eta1, CLHEPdouble phi1 ) 
                         { pp.setREtaPhi( r, eta1, phi1 ); }

inline void HepLorentzVector::setRhoPhiZ
		( CLHEPdouble rho1, CLHEPdouble phi1, CLHEPdouble z1 )
                         { pp.setRhoPhiZ ( rho1, phi1, z1 ); }

inline bool HepLorentzVector::isTimelike() const {
  return restMass2() > 0;
}  

inline bool  HepLorentzVector::isSpacelike() const {
  return restMass2() < 0;
}

inline bool  HepLorentzVector::isLightlike(CLHEPdouble epsilon) const {
  return std::fabs(restMass2()) < 2.0 * epsilon * ee * ee;
}

inline CLHEPdouble HepLorentzVector::diff2( const HepLorentzVector & w ) const {
    return metric*( (ee-w.ee)*(ee-w.ee) - (pp-w.pp).mag2() );
}

inline CLHEPdouble HepLorentzVector::delta2Euclidean 
					( const HepLorentzVector & w ) const {
    return (ee-w.ee)*(ee-w.ee) + (pp-w.pp).mag2();
}

inline CLHEPdouble HepLorentzVector::euclideanNorm2()  const {
  return ee*ee + pp.mag2();
}

inline CLHEPdouble HepLorentzVector::euclideanNorm()  const {
  return std::sqrt(euclideanNorm2());
}

inline CLHEPdouble HepLorentzVector::restMass2()      const { return m2(); }
inline CLHEPdouble HepLorentzVector::invariantMass2() const { return m2(); }

inline CLHEPdouble HepLorentzVector::restMass() const {
    if( t() < 0.0 ) ZMthrowC(ZMxpvNegativeMass(
              "E^2-p^2 < 0 for this particle. Magnitude returned."));
    return t() < 0.0 ? -m() : m();
}

inline CLHEPdouble HepLorentzVector::invariantMass() const {
    if( t() < 0.0 ) ZMthrowC(ZMxpvNegativeMass(
              "E^2-p^2 < 0 for this particle. Magnitude returned."));
    return t() < 0.0 ? -m() : m();
}

inline CLHEPdouble HepLorentzVector::invariantMass2
					(const HepLorentzVector & w) const {
  return (*this + w).m2();
} /* invariantMass2 */

//-*********
// boostOf()
//-*********

// Each of these is a shell over a boost method.

inline HepLorentzVector boostXOf
	(const HepLorentzVector & vec, CLHEPdouble bbeta) {
  HepLorentzVector vv (vec);
  return vv.boostX (bbeta);
}

inline HepLorentzVector boostYOf
	(const HepLorentzVector & vec, CLHEPdouble bbeta) {
  HepLorentzVector vv (vec);
  return vv.boostY (bbeta);
}

inline HepLorentzVector boostZOf
	(const HepLorentzVector & vec, CLHEPdouble bbeta) {
  HepLorentzVector vv (vec);
  return vv.boostZ (bbeta);
}

inline HepLorentzVector boostOf
	(const HepLorentzVector & vec, const Hep3Vector & betaVector ) {
  HepLorentzVector vv (vec);
  return vv.boost (betaVector);
}

inline HepLorentzVector boostOf
    (const HepLorentzVector & vec, const Hep3Vector & aaxis,  CLHEPdouble bbeta) {
  HepLorentzVector vv (vec);
  return vv.boost (aaxis, bbeta);
}

}  // namespace CLHEP
